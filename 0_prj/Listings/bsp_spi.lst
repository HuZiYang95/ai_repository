C51 COMPILER V9.59.0.0   BSP_SPI                                                           08/29/2024 16:46:59 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE BSP_SPI
OBJECT MODULE PLACED IN .\Objects\bsp_spi.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\1_bsp\bsp_spi.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\1_bsp;..\2_ha
                    -l;..\3_app;..\4_user) DEBUG PRINT(.\Listings\bsp_spi.lst) OBJECT(.\Objects\bsp_spi.obj)

line level    source

   1          /**
   2           * @file bsp_spi.c
   3           * @author your name (you@domain.com)
   4           * @brief 中微爱芯 & aip8f3264
   5           * @brief RD8F12AE2207A / RD8F04DS1407A / RD8F04DS1007A
   6           * @version 0.1
   7           * @date 2024-01-04
   8           *
   9           * @copyright Copyright (c) 2024
  10           *
  11           */
  12          #include "bsp_spi.h"
  13          #include "bsp_sfr.h"
  14          
  15          
  16          void bsp_spi_init(TYPE_ENUM_SPI_M_S MasterSlave, TYPE_ENUM_SPI_SEND_MODE MsbLsb, TYPE_ENUM_SPI_CLK Clk, \
  17              TYPE_ENUM_SPI_INT_MODE IntMode, TYPE_ENUM_SPI_INT_PRIORITY IntPriotity, TYPE_ENUM_SPI_CHAN Chan)
  18          {
  19   1          // 1-配置主从机模式
  20   1          bsp_spi_m_s(MasterSlave);
  21   1          // 2-空闲状态SCK保持1
  22   1          SPICR1 &= U8_NBIT4;
  23   1          // 3-SCK周期第一个沿采样
  24   1          SPICR1 &= U8_NBIT3;
  25   1          // 4-配置大小端模式
  26   1          bsp_spi_send_mode(MsbLsb);
  27   1          // 5-配置时钟分频
  28   1          bsp_spi_clk(Clk);
  29   1          // 6-配置中断模式及优先级
  30   1          bsp_spi_int_mode(IntMode, IntPriotity);
  31   1          // 7-配置端口
  32   1          bsp_spi_chan(Chan, MasterSlave);
  33   1          // 8-使能spi模块
  34   1          bsp_spi_switch(ENABLE);
  35   1      
  36   1      }
  37          
  38          
  39          void bsp_spi_m_s(TYPE_ENUM_SPI_M_S MasterSlave)
  40          {
  41   1          switch (MasterSlave)
  42   1          {
  43   2              case SPI_MASTER: SPICR1 |= U8_BIT5; break;
  44   2              case SPI_SLAVE: SPICR1 &= U8_NBIT5; break;
  45   2              default: break;
  46   2          }
  47   1      }
  48          
  49          
  50          void bsp_spi_send_mode(TYPE_ENUM_SPI_SEND_MODE MsbLsb)
  51          {
  52   1          switch (MsbLsb)
  53   1          {
  54   2              case SPI_DATA_MSB: SPICR1 |= U8_BIT6; break;
C51 COMPILER V9.59.0.0   BSP_SPI                                                           08/29/2024 16:46:59 PAGE 2   

  55   2              case SPI_DATA_LSB: SPICR1 &= U8_NBIT6; break;
  56   2              default: break;
  57   2          }
  58   1      }
  59          
  60          
  61          void bsp_spi_clk(TYPE_ENUM_SPI_CLK Clk)
  62          {
  63   1          unsigned char i;
  64   1      
  65   1          i = SPICR1;
  66   1          i &= 0xF8;
  67   1          i |= Clk;
  68   1          SPICR1 = i;
  69   1      }
  70          
  71          
  72          void bsp_spi_int_mode(TYPE_ENUM_SPI_INT_MODE IntMode, TYPE_ENUM_SPI_INT_PRIORITY IntPriotity)
  73          {
  74   1          switch (IntMode)
  75   1          {
  76   2              case SPI_S_POLL_R_POLL: SPICR2 &= U8_NBIT6; SPICR2 &= U8_NBIT7; break;
  77   2              case SPI_S_INT_R_POLL: SPICR2 |= U8_BIT7; SPICR2 &= U8_NBIT6; IE2 |= U8_BIT1; break;
  78   2              case SPI_S_POLL_R_INT: SPICR2 |= U8_BIT6; SPICR2 &= U8_NBIT7; IE2 |= U8_BIT1; break;
  79   2              case SPI_S_INT_R_INT: SPICR2 |= U8_BIT6; SPICR2 |= U8_BIT7; IE2 |= U8_BIT1; break;
  80   2              default:  break;
  81   2          }
  82   1      
  83   1          switch (IntPriotity)
  84   1          {
  85   2              case SPI_INT_PRIORITY_0:   IP0 &= ~0x08;   IP1 &= ~0x08;   break;
  86   2              case SPI_INT_PRIORITY_1:   IP0 |= 0x08;    IP1 &= ~0x08;   break;
  87   2              case SPI_INT_PRIORITY_2:   IP0 &= ~0x08;   IP1 |= 0x08;    break;
  88   2              case SPI_INT_PRIORITY_3:   IP0 |= 0x08;    IP1 |= 0x08;    break;
  89   2              default:    break;
  90   2          }
  91   1      }
  92          
  93          
  94          void bsp_spi_chan(TYPE_ENUM_SPI_CHAN Chan, TYPE_ENUM_SPI_M_S MasterSlave)
  95          {
  96   1          switch (Chan)
  97   1          {
  98   2              case SPI_CHAN_P2:
  99   2                  SEGCR3 &= U8_NBIT0; LCMCR2 &= (U8_NBIT0 & U8_NBIT0 & U8_NBIT0); // 端口映射
 100   2                  if (SPI_MASTER == MasterSlave)
 101   2                  {
 102   3                      P2 |= (U8_BIT2 | U8_BIT4 | U8_BIT5);
 103   3                      P2IO |= (U8_BIT2 | U8_BIT4 | U8_BIT5);
 104   3                      P2IO &= U8_NBIT3;
 105   3                      P2PU |= U8_BIT3;
 106   3                  }
 107   2                  else if (SPI_SLAVE == MasterSlave)
 108   2                  {
 109   3                      P2 |= U8_BIT3;
 110   3                      P2IO &= (U8_NBIT2 & U8_NBIT4 & U8_NBIT5);
 111   3                      P2IO |= U8_BIT3;
 112   3                      P2PU |= (U8_BIT2 | U8_BIT4 | U8_BIT5);
 113   3                  }
 114   2                  break;
 115   2              case SPI_CHAN_P1:
 116   2                  SEGCR3 |= U8_BIT0; LCMCR2 |= (U8_BIT0 & U8_BIT0 & U8_BIT0); // 端口映射
C51 COMPILER V9.59.0.0   BSP_SPI                                                           08/29/2024 16:46:59 PAGE 3   

 117   2                  if (SPI_MASTER == MasterSlave)
 118   2                  {
 119   3                      P1 |= (U8_BIT0 | U8_BIT2 | U8_BIT3);
 120   3                      P1IO |= (U8_BIT0 | U8_BIT2 | U8_BIT3);
 121   3                      P1IO &= U8_NBIT1;
 122   3                      P1PU |= U8_BIT1;
 123   3                  }
 124   2                  else if (SPI_SLAVE == MasterSlave)
 125   2                  {
 126   3                      P2 |= U8_BIT1;
 127   3                      P2IO &= (U8_NBIT0 & U8_NBIT2 & U8_NBIT3);
 128   3                      P2IO |= U8_BIT1;
 129   3                      P2PU |= (U8_BIT0 | U8_BIT2 | U8_BIT3);
 130   3                  }
 131   2                  break;
 132   2      
 133   2              default:
 134   2                  break;
 135   2          }
 136   1      }
 137          
 138          
 139          void bsp_spi_switch(TYPE_ENUM_SWITCH Switch)
 140          {
 141   1          if (ENABLE == Switch)   SPICR1 |= U8_BIT7;
 142   1          else SPICR1 &= U8_NBIT7;
 143   1      }
 144          
 145          
 146          unsigned char bsp_spi_send_irq(unsigned char Data)
 147          {
 148   1          SPIDR = Data;
 149   1          return SPIDR;
 150   1      }
 151          
 152          
 153          unsigned char bsp_spi_write_read_poll(unsigned char Data)
 154          {
 155   1          while (!(SPISR & 0x02));
 156   1          SPIDR = Data;
 157   1          while (!(SPISR & 0x01));
 158   1          SPISR &= ~0x01;
 159   1          return SPIDR;
 160   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    333    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
