C51 COMPILER V9.59.0.0   BSP_UART                                                          08/29/2024 16:47:00 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE BSP_UART
OBJECT MODULE PLACED IN .\Objects\bsp_uart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\1_bsp\bsp_uart.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\1_bsp;..\2_h
                    -al;..\3_app;..\4_user) DEBUG PRINT(.\Listings\bsp_uart.lst) OBJECT(.\Objects\bsp_uart.obj)

line level    source

   1          /**
   2           * @file bsp_uart.c
   3           * @author your name (you@domain.com)
   4           * @brief 中微爱芯 & aip8f3264
   5           * @brief RD8F12AE2207A / RD8F04DS1407A / RD8F04DS1007A
   6           * @version 0.1
   7           * @date 2024-01-04
   8           *
   9           * @copyright Copyright (c) 2024
  10           *
  11           */
  12          #include "bsp_uart.h"
  13          #include "bsp_sfr.h"
  14          #include "typedef.h"
  15          #include "bsp_timer.h"
  16          
  17          
  18           /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  19           /*                           串口0相关函数                            */
  20           /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  21           /**
  22            * @brief
  23            *
  24            * @param Baud  波特率
  25            * @param Chan  串口通道
  26            * @param TxSwitch  发送使能
  27            * @param RxSwitch  接收使能位
  28            * @param IntPriority   中断优先级
  29            *
  30            * @note 默认数据位8bit，无校验位，停止位1bit
  31            */
  32          void bsp_uart0_init(TYPE_ENUM_UART_BAUD Baud, TYPE_ENUM_UART_CHAN Chan, TYPE_ENUM_SWITCH TxEnable, TYPE_EN
             -UM_SWITCH RxEnable, TYPE_ENUM_UART_INT_PRIORITY IntPriority)
  33          {
  34   1          // 1-配置波特率
  35   1          bsp_uart0_baud(Baud);
  36   1          // 2-配置数据位
  37   1          bsp_uart0_data_bit(UART_DATA_8BIT);
  38   1          // 3-配置校验位
  39   1          bsp_uart0_check(UART_CHECK_UNCHECK);
  40   1          // 4-配置停止位
  41   1          bsp_uart0_stop(UART_STOP_1);
  42   1          // 5-配置串口映射端口
  43   1          bsp_uart0_chan(Chan);
  44   1          // 6-配置发送接收模式及中断优先级
  45   1          bsp_uart0_mode_priority(IntPriority);
  46   1          // 8-配置模块使能位
  47   1          bsp_uart0_tx_switch(TxEnable);
  48   1          bsp_uart0_rx_switch(RxEnable);
  49   1          bsp_uart0_switch(ENABLE);
  50   1      }
  51          
  52          
  53          /**
C51 COMPILER V9.59.0.0   BSP_UART                                                          08/29/2024 16:47:00 PAGE 2   

  54           * @brief 设置uart0波特率
  55           *
  56           * @param Baud 波特率
  57           */
  58          void bsp_uart0_baud(TYPE_ENUM_UART_BAUD Baud)
  59          {
  60   1          switch (Baud)
  61   1          {
  62   2              case UART_BAUD_2400:
  63   2                  if (16 == SysClock) { UART0BRR2 = 0x2A; UART0BRR1 = 0x60; }
  64   2                  else if (8 == SysClock) { UART0BRR2 = 0x35; UART0BRR1 = 0x30; }
  65   2                  break;
  66   2              case UART_BAUD_4800:
  67   2                  if (16 == SysClock) { UART0BRR2 = 0x35; UART0BRR1 = 0x30; }
  68   2                  else if (8 == SysClock) { UART0BRR2 = 0x33; UART0BRR1 = 0x98; }
  69   2                  break;
  70   2              case UART_BAUD_9600:
  71   2                  if (16 == SysClock) { UART0BRR2 = 0x33; UART0BRR1 = 0x98; }
  72   2                  else if (8 == SysClock) { UART0BRR2 = 0x31; UART0BRR1 = 0xCC; }
  73   2                  break;
  74   2              case UART_BAUD_14400:
  75   2                  if (16 == SysClock) { UART0BRR2 = 0x37; UART0BRR1 = 0xBB; }
  76   2                  else if (8 == SysClock) { UART0BRR2 = 0x3C; UART0BRR1 = 0xDE; }
  77   2                  break;
  78   2              case UART_BAUD_19200:
  79   2                  if (16 == SysClock) { UART0BRR2 = 0x31; UART0BRR1 = 0xCC; }
  80   2                  else if (8 == SysClock) { UART0BRR2 = 0x31; UART0BRR1 = 0xE6; }
  81   2                  break;
  82   2              case UART_BAUD_115200:
  83   2                  if (16 == SysClock) { UART0BRR2 = 0x3B; UART0BRR1 = 0xF8; }
  84   2                  else if (8 == SysClock) { UART0BRR2 = 0x35; UART0BRR1 = 0xFC; }
  85   2                  break;
  86   2              default:    break;
  87   2          }
  88   1      }
  89          
  90          
  91          /**
  92           * @brief 设置uart0数据位数
  93           *
  94           * @param DataBit 数据位
  95           */
  96          void bsp_uart0_data_bit(TYPE_ENUM_UART_DATA_BIT DataBit)
  97          {
  98   1          switch (DataBit)
  99   1          {
 100   2              case UART_DATA_8BIT:
 101   2                  UART0CR1 &= ~0x08;
 102   2                  break;
 103   2              case UART_DATA_9BIT:
 104   2                  UART0CR1 |= 0x08;
 105   2                  break;
 106   2              default:
 107   2                  break;
 108   2          }
 109   1      }
 110          
 111          
 112          /**
 113           * @brief 设置uart0校验位
 114           *
 115           * @param Check 校验位
C51 COMPILER V9.59.0.0   BSP_UART                                                          08/29/2024 16:47:00 PAGE 3   

 116           */
 117          void bsp_uart0_check(TYPE_ENUM_UART_CHECK Check)
 118          {
 119   1          switch (Check)
 120   1          {
 121   2              case UART_CHECK_UNCHECK:    UART0CR1 &= ~0x30;  break;
 122   2              case UART_CHECK_ODD:        UART0CR1 |= 0x30;  break;
 123   2              case UART_CHECK_EVEN:       UART0CR1 |= 0x20;  UART0CR1 &= ~0x10;  break;
 124   2              default:    break;
 125   2          }
 126   1      }
 127          
 128          
 129          /**
 130           * @brief 设置uart0停止位
 131           *
 132           * @param Stop 停止位
 133           */
 134          void bsp_uart0_stop(TYPE_ENUM_UART_STOP Stop)
 135          {
 136   1          switch (Stop)
 137   1          {
 138   2              case UART_STOP_1:   UART0CR3 &= ~0x04;  break;
 139   2              case UART_STOP_2:   UART0CR3 |= 0x04;  break;
 140   2              default:    break;
 141   2          }
 142   1      }
 143          
 144          
 145          /**
 146           * @brief 设置uart0端口
 147           *
 148           * @param Chan 端口
 149           */
 150          void bsp_uart0_chan(TYPE_ENUM_UART_CHAN Chan)
 151          {
 152   1          switch (Chan)
 153   1          {
 154   2              case UART0_RX_P20_TX_P21:   LCMCR1 &= U8_NBIT1;  P2IO &= U8_NBIT0; P2PU |= U8_BIT0; P2IO |= U8_BIT
             -1;  P2 |= U8_BIT1; break;
 155   2              case UART0_RX_P20_TX_P17:   LCMCR1 |= U8_BIT1;   P2IO &= U8_NBIT0; P2PU |= U8_BIT0; P1IO |= U8_BIT
             -7;  P1 |= U8_BIT7; break;
 156   2              default:    break;
 157   2          }
 158   1      }
 159          
 160          
 161          /**
 162           * @brief 设置串口0发送接收模式，及中断优先级
 163           *
 164           * @param Mode 发送接收模式
 165           * @param IntPriority 中断优先级
 166           */
 167          void bsp_uart0_mode_priority(TYPE_ENUM_UART_INT_PRIORITY IntPriority)
 168          {
 169   1          UART0SR = 0;
 170   1          UART0CR2 |= 0x60;
 171   1          IE1 |= 0x08;
 172   1      
 173   1          switch (IntPriority)
 174   1          {
 175   2              case UART_INT_PRIORITY_0:   IP0 &= ~0x08;   IP1 &= ~0x08;   break;
C51 COMPILER V9.59.0.0   BSP_UART                                                          08/29/2024 16:47:00 PAGE 4   

 176   2              case UART_INT_PRIORITY_1:   IP0 |= 0x08;    IP1 &= ~0x08;   break;
 177   2              case UART_INT_PRIORITY_2:   IP0 &= ~0x08;   IP1 |= 0x08;    break;
 178   2              case UART_INT_PRIORITY_3:   IP0 |= 0x08;    IP1 |= 0x08;    break;
 179   2              default:    break;
 180   2          }
 181   1      }
 182          
 183          
 184          /**
 185           * @brief uart0发送使能
 186           *
 187           * @param Switch
 188           */
 189          void bsp_uart0_tx_switch(TYPE_ENUM_SWITCH Switch)
 190          {
 191   1          if (ENABLE == Switch)   UART0CR2 |= 0x08;
 192   1          else UART0CR2 &= ~0x08;
 193   1      }
 194          
 195          
 196          /**
 197           * @brief uart0接收使能
 198           *
 199           * @param Switch
 200           */
 201          void bsp_uart0_rx_switch(TYPE_ENUM_SWITCH Switch)
 202          {
 203   1          if (ENABLE == Switch)   UART0CR2 |= 0x04;
 204   1          else UART0CR2 &= ~0x04;
 205   1      }
 206          
 207          
 208          /**
 209           * @brief uart0模块使能
 210           *
 211           * @param Switch
 212           */
 213          void bsp_uart0_switch(TYPE_ENUM_SWITCH Switch)
 214          {
 215   1          if (ENABLE == Switch)   UART0CR2 |= 0x02;
 216   1          else UART0CR2 &= ~0x02;
 217   1      }
 218          
 219          
 220          /**
 221           * @brief uart0 阻塞发送
 222           *
 223           * @param Data 发送数据
 224           */
 225          void bsp_uart0_send_block(unsigned char Data)
 226          {
 227   1          UART0DR = Data;
 228   1          while (!(UART0SR & 0x40));
 229   1      }
 230          
 231          
 232          /**
 233           * @brief uart0 阻塞接收
 234           *
 235           * @return unsigned char 接收数据
 236           */
 237          unsigned char bsp_uart0_rece_block(void)
C51 COMPILER V9.59.0.0   BSP_UART                                                          08/29/2024 16:47:00 PAGE 5   

 238          {
 239   1          while (!(UART0SR & 0x20));
 240   1          UART0SR &= ~0x20;
 241   1          return UART0DR;
 242   1      }
 243          
 244          
 245          /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
 246          /*                           串口1相关函数                            */
 247          /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
 248          /**
 249           * @brief
 250           *
 251           * @param Baud  波特率
 252           * @param Chan  串口通道
 253           * @param TxSwitch  发送使能
 254           * @param RxSwitch  接收使能位
 255           * @param IntPriority   中断优先级
 256           *
 257           * @note 默认数据位8bit，无校验位，停止位1bit
 258           */
 259          void bsp_uart1_init(TYPE_ENUM_UART_BAUD Baud, TYPE_ENUM_UART_CHAN Chan, TYPE_ENUM_SWITCH TxEnable, TYPE_EN
             -UM_SWITCH RxEnable, TYPE_ENUM_UART_INT_PRIORITY IntPriority)
 260          {
 261   1          // 1-配置波特率
 262   1          bsp_uart1_baud(Baud);
 263   1          // 2-配置数据位
 264   1          bsp_uart1_data_bit(UART_DATA_8BIT);
 265   1          // 3-配置校验位
 266   1          bsp_uart1_check(UART_CHECK_UNCHECK);
 267   1          // 4-配置停止位
 268   1          bsp_uart1_stop(UART_STOP_1);
 269   1          // 5-配置串口映射端口
 270   1          bsp_uart1_chan(Chan);
 271   1          // 6-配置发送接收模式及中断优先级
 272   1          bsp_uart1_mode_priority(IntPriority);
 273   1          // 8-配置模块使能位
 274   1          bsp_uart1_tx_switch(TxEnable);
 275   1          bsp_uart1_rx_switch(RxEnable);
 276   1          bsp_uart1_switch(ENABLE);
 277   1      }
 278          
 279          
 280          /**
 281           * @brief 设置uart1波特率
 282           *
 283           * @param Baud 波特率
 284           */
 285          void bsp_uart1_baud(TYPE_ENUM_UART_BAUD Baud)
 286          {
 287   1          switch (Baud)
 288   1          {
 289   2              case UART_BAUD_2400:
 290   2                  if (16 == SysClock) { UART1BRR2 = 0x2A; UART1BRR1 = 0x60; }
 291   2                  else if (8 == SysClock) { UART1BRR2 = 0x35; UART1BRR1 = 0x30; }
 292   2                  break;
 293   2              case UART_BAUD_4800:
 294   2                  if (16 == SysClock) { UART1BRR2 = 0x35; UART1BRR1 = 0x30; }
 295   2                  else if (8 == SysClock) { UART1BRR2 = 0x33; UART1BRR1 = 0x98; }
 296   2                  break;
 297   2              case UART_BAUD_9600:
 298   2                  if (16 == SysClock) { UART1BRR2 = 0x33; UART1BRR1 = 0x98; }
C51 COMPILER V9.59.0.0   BSP_UART                                                          08/29/2024 16:47:00 PAGE 6   

 299   2                  else if (8 == SysClock) { UART1BRR2 = 0x31; UART1BRR1 = 0xCC; }
 300   2                  break;
 301   2              case UART_BAUD_14400:
 302   2                  if (16 == SysClock) { UART1BRR2 = 0x37; UART1BRR1 = 0xBB; }
 303   2                  else if (8 == SysClock) { UART1BRR2 = 0x3C; UART1BRR1 = 0xDE; }
 304   2                  break;
 305   2              case UART_BAUD_19200:
 306   2                  if (16 == SysClock) { UART1BRR2 = 0x31; UART1BRR1 = 0xCC; }
 307   2                  else if (8 == SysClock) { UART1BRR2 = 0x31; UART1BRR1 = 0xE6; }
 308   2                  break;
 309   2              case UART_BAUD_115200:
 310   2                  if (16 == SysClock) { UART1BRR2 = 0x3B; UART1BRR1 = 0xF8; }
 311   2                  else if (8 == SysClock) { UART1BRR2 = 0x35; UART1BRR1 = 0xFC; }
 312   2                  break;
 313   2              default:    break;
 314   2          }
 315   1      }
 316          
 317          
 318          /**
 319           * @brief 设置uart1数据位数
 320           *
 321           * @param DataBit 数据位
 322           */
 323          void bsp_uart1_data_bit(TYPE_ENUM_UART_DATA_BIT DataBit)
 324          {
 325   1          switch (DataBit)
 326   1          {
 327   2              case UART_DATA_8BIT:
 328   2                  UART1CR1 &= ~0x08;
 329   2                  break;
 330   2              case UART_DATA_9BIT:
 331   2                  UART1CR1 |= 0x08;
 332   2                  break;
 333   2              default:
 334   2                  break;
 335   2          }
 336   1      }
 337          
 338          
 339          /**
 340           * @brief 设置uart1校验位
 341           *
 342           * @param Check 校验位
 343           */
 344          void bsp_uart1_check(TYPE_ENUM_UART_CHECK Check)
 345          {
 346   1          switch (Check)
 347   1          {
 348   2              case UART_CHECK_UNCHECK:    UART1CR1 &= ~0x30;  break;
 349   2              case UART_CHECK_ODD:        UART1CR1 |= 0x30;  break;
 350   2              case UART_CHECK_EVEN:       UART1CR1 |= 0x20;  UART1CR1 &= ~0x10;  break;
 351   2              default:    break;
 352   2          }
 353   1      }
 354          
 355          
 356          /**
 357           * @brief 设置uart1停止位
 358           *
 359           * @param Stop 停止位
 360           */
C51 COMPILER V9.59.0.0   BSP_UART                                                          08/29/2024 16:47:00 PAGE 7   

 361          void bsp_uart1_stop(TYPE_ENUM_UART_STOP Stop)
 362          {
 363   1          switch (Stop)
 364   1          {
 365   2              case UART_STOP_1:   UART1CR3 &= ~0x04;  break;
 366   2              case UART_STOP_2:   UART1CR3 |= 0x04;  break;
 367   2              default:    break;
 368   2          }
 369   1      }
 370          
 371          
 372          /**
 373           * @brief 设置uart1端口
 374           *
 375           * @param Chan 端口
 376           */
 377          void bsp_uart1_chan(TYPE_ENUM_UART_CHAN Chan)
 378          {
 379   1          switch (Chan)
 380   1          {
 381   2              case UART1_RX_P26_TX_P27:   LCMCR1 &= U8_NBIT5;  P2IO &= U8_NBIT6; P2PU |= U8_BIT6;  LCMCR1 &= U8_
             -NBIT4;  P2IO |= U8_BIT7;  P2 |= U8_BIT7; break;
 382   2              case UART1_RX_P45_TX_P44:   LCMCR1 |= U8_BIT5;   P4IO &= U8_NBIT5; P4PU |= U8_BIT5;  LCMCR1 |= U8_
             -BIT4;   P4IO |= U8_BIT4;  P4 |= U8_BIT4; break;
 383   2              default:    break;
 384   2          }
 385   1      }
 386          
 387          
 388          /**
 389           * @brief 设置串口1发送接收模式，及中断优先级
 390           *
 391           * @param Mode 发送接收模式
 392           * @param IntPriority 中断优先级
 393           */
 394          void bsp_uart1_mode_priority(TYPE_ENUM_UART_INT_PRIORITY IntPriority)
 395          {
 396   1          UART1SR = 0;
 397   1          UART1CR2 |= 0x60;
 398   1          IE1 |= 0x08;
 399   1      
 400   1          switch (IntPriority)
 401   1          {
 402   2              case UART_INT_PRIORITY_0:   IP0 &= ~0x08;   IP1 &= ~0x08;   break;
 403   2              case UART_INT_PRIORITY_1:   IP0 |= 0x08;    IP1 &= ~0x08;   break;
 404   2              case UART_INT_PRIORITY_2:   IP0 &= ~0x08;   IP1 |= 0x08;    break;
 405   2              case UART_INT_PRIORITY_3:   IP0 |= 0x08;    IP1 |= 0x08;    break;
 406   2              default:    break;
 407   2          }
 408   1      }
 409          
 410          
 411          /**
 412           * @brief uart1发送使能
 413           *
 414           * @param Switch
 415           */
 416          void bsp_uart1_tx_switch(TYPE_ENUM_SWITCH Switch)
 417          {
 418   1          if (ENABLE == Switch)   UART1CR2 |= 0x08;
 419   1          else UART1CR2 &= ~0x08;
 420   1      }
C51 COMPILER V9.59.0.0   BSP_UART                                                          08/29/2024 16:47:00 PAGE 8   

 421          
 422          
 423          /**
 424           * @brief uart1接收使能
 425           *
 426           * @param Switch
 427           */
 428          void bsp_uart1_rx_switch(TYPE_ENUM_SWITCH Switch)
 429          {
 430   1          if (ENABLE == Switch)   UART1CR2 |= 0x04;
 431   1          else UART1CR2 &= ~0x04;
 432   1      }
 433          
 434          
 435          /**
 436           * @brief uart1模块使能
 437           *
 438           * @param Switch
 439           */
 440          void bsp_uart1_switch(TYPE_ENUM_SWITCH Switch)
 441          {
 442   1          if (ENABLE == Switch)   UART1CR2 |= 0x02;
 443   1          else UART1CR2 &= ~0x02;
 444   1      }
 445          
 446          
 447          /**
 448           * @brief uart1 阻塞发送
 449           *
 450           * @param Data 发送数据
 451           */
 452          void bsp_uart1_send_block(unsigned char Data)
 453          {
 454   1          UART1DR = Data;
 455   1          while (!(UART1SR & 0x40));
 456   1      }
 457          
 458          
 459          /**
 460           * @brief uart1 阻塞接收
 461           *
 462           * @return unsigned char 接收数据
 463           */
 464          unsigned char bsp_uart1_rece_block(void)
 465          {
 466   1          while (!(UART1SR & 0x20));
 467   1          UART1SR &= ~0x20;
 468   1          return UART1DR;
 469   1      }
 470          
 471          
 472          /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
 473          /*                           串口2相关函数                            */
 474          /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
 475          /**
 476           * @brief
 477           *
 478           * @param Baud 波特率
 479           * @param Chan 串口通道
 480           * @param TxEnable 发送使能
 481           * @param RxEnable 接收使能
 482           * @param IntPriority 串口中断优先级
C51 COMPILER V9.59.0.0   BSP_UART                                                          08/29/2024 16:47:00 PAGE 9   

 483           *
 484           * @note 默认数据位8bit，无校验位，停止位1bit
 485           */
 486          void bsp_uart2_init(TYPE_ENUM_UART_BAUD Baud, TYPE_ENUM_UART_CHAN Chan, TYPE_ENUM_SWITCH TxEnable, TYPE_EN
             -UM_SWITCH RxEnable, TYPE_ENUM_UART_INT_PRIORITY IntPriority)
 487          {
 488   1          // 1-配置波特率
 489   1          bsp_uart2_baud(Baud);
 490   1          // 2-配置数据位
 491   1          bsp_uart2_data_bit(UART_DATA_8BIT);
 492   1          // 3-配置校验位
 493   1          bsp_uart2_check(UART_CHECK_UNCHECK);
 494   1          // 4-配置停止位
 495   1          bsp_uart2_stop(UART_STOP_1);
 496   1          // 5-配置串口映射端口
 497   1          bsp_uart2_chan(Chan);
 498   1          // 6-配置发送接收模式及中断优先级
 499   1          bsp_uart2_mode_priority(IntPriority);
 500   1          // 8-配置模块使能位
 501   1          bsp_uart2_tx_switch(TxEnable);
 502   1          bsp_uart2_rx_switch(RxEnable);
 503   1          bsp_uart2_switch(ENABLE);
 504   1      }
 505          
 506          
 507          /**
 508           * @brief 设置uart2波特率
 509           *
 510           * @param Baud 波特率
 511           */
 512          void bsp_uart2_baud(TYPE_ENUM_UART_BAUD Baud)
 513          {
 514   1          switch (Baud)
 515   1          {
 516   2              case UART_BAUD_2400:
 517   2                  if (16 == SysClock) { UART2BRR2 = 0x2A; UART2BRR1 = 0x60; }
 518   2                  else if (8 == SysClock) { UART2BRR2 = 0x35; UART2BRR1 = 0x30; }
 519   2                  break;
 520   2              case UART_BAUD_4800:
 521   2                  if (16 == SysClock) { UART2BRR2 = 0x35; UART2BRR1 = 0x30; }
 522   2                  else if (8 == SysClock) { UART2BRR2 = 0x33; UART2BRR1 = 0x98; }
 523   2                  break;
 524   2              case UART_BAUD_9600:
 525   2                  if (16 == SysClock) { UART2BRR2 = 0x33; UART2BRR1 = 0x98; }
 526   2                  else if (8 == SysClock) { UART2BRR2 = 0x31; UART2BRR1 = 0xCC; }
 527   2                  break;
 528   2              case UART_BAUD_14400:
 529   2                  if (16 == SysClock) { UART2BRR2 = 0x37; UART2BRR1 = 0xBB; }
 530   2                  else if (8 == SysClock) { UART2BRR2 = 0x3C; UART2BRR1 = 0xDE; }
 531   2                  break;
 532   2              case UART_BAUD_19200:
 533   2                  if (16 == SysClock) { UART2BRR2 = 0x31; UART2BRR1 = 0xCC; }
 534   2                  else if (8 == SysClock) { UART2BRR2 = 0x31; UART2BRR1 = 0xE6; }
 535   2                  break;
 536   2              case UART_BAUD_115200:
 537   2                  if (16 == SysClock) { UART2BRR2 = 0x3B; UART2BRR1 = 0xF8; }
 538   2                  else if (8 == SysClock) { UART2BRR2 = 0x35; UART2BRR1 = 0xFC; }
 539   2                  break;
 540   2              default:    break;
 541   2          }
 542   1      }
 543          
C51 COMPILER V9.59.0.0   BSP_UART                                                          08/29/2024 16:47:00 PAGE 10  

 544          
 545          /**
 546           * @brief 设置uart2数据位数
 547           *
 548           * @param DataBit 数据位
 549           */
 550          void bsp_uart2_data_bit(TYPE_ENUM_UART_DATA_BIT DataBit)
 551          {
 552   1          switch (DataBit)
 553   1          {
 554   2              case UART_DATA_8BIT:
 555   2                  UART2CR1 &= ~0x08;
 556   2                  break;
 557   2              case UART_DATA_9BIT:
 558   2                  UART2CR1 |= 0x08;
 559   2                  break;
 560   2              default:
 561   2                  break;
 562   2          }
 563   1      }
 564          
 565          
 566          /**
 567           * @brief 设置uart2校验位
 568           *
 569           * @param Check 校验位
 570           */
 571          void bsp_uart2_check(TYPE_ENUM_UART_CHECK Check)
 572          {
 573   1          switch (Check)
 574   1          {
 575   2              case UART_CHECK_UNCHECK:    UART2CR1 &= ~0x30; break;
 576   2              case UART_CHECK_ODD:        UART2CR1 |= 0x30;  break;
 577   2              case UART_CHECK_EVEN:       UART2CR1 |= 0x20;  UART2CR1 &= ~0x10;  break;
 578   2              default:    break;
 579   2          }
 580   1      }
 581          
 582          
 583          /**
 584           * @brief 设置uart2停止位
 585           *
 586           * @param Stop 停止位
 587           */
 588          void bsp_uart2_stop(TYPE_ENUM_UART_STOP Stop)
 589          {
 590   1          switch (Stop)
 591   1          {
 592   2              case UART_STOP_1:   UART2CR3 &= ~0x04;  break;
 593   2              case UART_STOP_2:   UART2CR3 |= 0x04;  break;
 594   2              default:    break;
 595   2          }
 596   1      }
 597          
 598          
 599          /**
 600           * @brief 设置uart2端口
 601           *
 602           * @param Chan 端口
 603           */
 604          void bsp_uart2_chan(TYPE_ENUM_UART_CHAN Chan)
 605          {
C51 COMPILER V9.59.0.0   BSP_UART                                                          08/29/2024 16:47:00 PAGE 11  

 606   1          switch (Chan)
 607   1          {
 608   2              case UART2_RX_P00_TX_P01:   LCMCR1 &= U8_NBIT3;  P0IO &= U8_NBIT0; P0PU |= U8_BIT0;  LCMCR1 &= U8_
             -NBIT2;  P0IO |= U8_BIT1; P0 |= U8_BIT1; break;
 609   2              case UART2_RX_P41_TX_P40:   LCMCR1 |= U8_BIT3;   P4IO &= U8_NBIT1; P4PU |= U8_BIT1;  LCMCR1 |= U8_
             -BIT2;   P4IO |= U8_BIT0; P4 |= U8_BIT0; break;
 610   2              default:    break;
 611   2          }
 612   1      }
 613          
 614          
 615          /**
 616           * @brief 设置串口2发送接收模式，及中断优先级
 617           *
 618           * @param Mode 发送接收模式
 619           * @param IntPriority 中断优先级
 620           */
 621          void bsp_uart2_mode_priority(TYPE_ENUM_UART_INT_PRIORITY IntPriority)
 622          {
 623   1          UART2SR = 0;
 624   1          UART2CR2 |= 0x60;
 625   1          IE1 |= 0x08;
 626   1      
 627   1          switch (IntPriority)
 628   1          {
 629   2              case UART_INT_PRIORITY_0:   IP0 &= ~0x08;   IP1 &= ~0x08;   break;
 630   2              case UART_INT_PRIORITY_1:   IP0 |= 0x08;    IP1 &= ~0x08;   break;
 631   2              case UART_INT_PRIORITY_2:   IP0 &= ~0x08;   IP1 |= 0x08;    break;
 632   2              case UART_INT_PRIORITY_3:   IP0 |= 0x08;    IP1 |= 0x08;    break;
 633   2              default:    break;
 634   2          }
 635   1      }
 636          
 637          
 638          /**
 639           * @brief uart2发送使能
 640           *
 641           * @param Switch
 642           */
 643          void bsp_uart2_tx_switch(TYPE_ENUM_SWITCH Switch)
 644          {
 645   1          if (ENABLE == Switch)   UART2CR2 |= 0x08;
 646   1          else UART2CR2 &= ~0x08;
 647   1      }
 648          
 649          
 650          /**
 651           * @brief uart2接收使能
 652           *
 653           * @param Switch
 654           */
 655          void bsp_uart2_rx_switch(TYPE_ENUM_SWITCH Switch)
 656          {
 657   1          if (ENABLE == Switch)   UART2CR2 |= 0x04;
 658   1          else UART2CR2 &= ~0x04;
 659   1      }
 660          
 661          
 662          /**
 663           * @brief uart2模块使能
 664           *
 665           * @param Switch
C51 COMPILER V9.59.0.0   BSP_UART                                                          08/29/2024 16:47:00 PAGE 12  

 666           */
 667          void bsp_uart2_switch(TYPE_ENUM_SWITCH Switch)
 668          {
 669   1          if (ENABLE == Switch)   UART2CR2 |= 0x02;
 670   1          else UART2CR2 &= ~0x02;
 671   1      }
 672          
 673          
 674          /**
 675           * @brief uart2 阻塞发送
 676           *
 677           * @param Data 发送数据
 678           */
 679          void bsp_uart2_send_block(unsigned char Data)
 680          {
 681   1          UART2DR = Data;
 682   1          while (!(UART2SR & 0x40));
 683   1      }
 684          
 685          
 686          /**
 687           * @brief uart2 阻塞接收
 688           *
 689           * @return unsigned char 接收数据
 690           */
 691          unsigned char bsp_uart2_rece_block(void)
 692          {
 693   1          while (!(UART2SR & 0x20));
 694   1          UART2SR &= ~0x20;
 695   1          return UART2DR;
 696   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1377    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
